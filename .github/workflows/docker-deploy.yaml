name: üó≥Ô∏è Docker Build & Push

on:
  release:
    types: [published]
  workflow_dispatch:
    inputs:
      release_tag:
        description: "Release tag"
        required: false

jobs:
  build_and_push_image:
    runs-on: ubuntu-latest

    steps:
      - name: ‚¨áÔ∏è Checkout code
        uses: actions/checkout@v2

      - name: üõ†Ô∏è Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: ü™™ Get tag name
        id: get_tag
        run: |
          TAG=${{ github.event.inputs.release_tag }}
          if [[ -z "$TAG" ]]; then
            TAG=${GITHUB_REF#refs/tags/}
          fi
          echo ::set-output name=tag::$TAG

      - name: ‚úÖ Validate tag name
        id: validate_tag
        run: |
          TAG=${{ steps.get_tag.outputs.tag }}
          if [[ $TAG == school-web@* ]] || [[ $TAG == school-api@* ]]; then
            echo "Tag name '$TAG' is valid."
          else
            echo "Tag name '$TAG' is not valid."
            exit 1
          fi

      - name: ü™¥ Get service name
        id: get_service_name
        run: echo ::set-output name=service_name::$(echo "${{ steps.get_tag.outputs.tag }}" | cut -d '@' -f 1)

      - name: üí≠ Get service version
        id: get_service_version
        run: echo ::set-output name=service_version::$(echo "${{ steps.get_tag.outputs.tag }}" | cut -d '@' -f 2)

      - name: üèóÔ∏è Docker Build & Push
        env:
          DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
          DOCKER_PASSWORD: ${{ secrets.DOCKER_PASSWORD }}
        run: |
          SERVICE_NAME=$(echo ${{ steps.get_service_name.outputs.service_name }})
          SERVICE_VERSION=$(echo ${{ steps.get_service_version.outputs.service_version }})
          docker build . --target $SERVICE_NAME --tag $SERVICE_NAME:$SERVICE_VERSION
          docker tag $SERVICE_NAME:$SERVICE_VERSION $DOCKER_USERNAME/$SERVICE_NAME:$SERVICE_VERSION
          docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
          docker push $DOCKER_USERNAME/$SERVICE_NAME:$SERVICE_VERSION
